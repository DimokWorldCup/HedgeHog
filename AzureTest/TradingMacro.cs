//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AzureTest
{
    using System;
    using System.Collections.Generic;
    
    public partial class TradingMacro
    {
        public string Pair { get; set; }
        public double TradingRatio { get; set; }
        public System.Guid UID { get; set; }
        public int LimitBar { get; set; }
        public double CurrentLoss { get; set; }
        public bool ReverseOnProfit { get; set; }
        public int FreezLimit { get; set; }
        public int CorridorMethod { get; set; }
        public int FreezeStop { get; set; }
        public string FibMax { get; set; }
        public double FibMin { get; set; }
        public double CorridornessMin { get; set; }
        public int CorridorIterationsIn { get; set; }
        public int CorridorIterationsOut { get; set; }
        public string CorridorIterations { get; set; }
        public int CorridorBarMinutes { get; set; }
        public int PairIndex { get; set; }
        public int TradingGroup { get; set; }
        public int MaximumPositions { get; set; }
        public bool IsActive { get; set; }
        public string TradingMacroName { get; set; }
        public bool LimitCorridorByBarHeight { get; set; }
        public double MaxLotByTakeProfitRatio { get; set; }
        public int BarPeriodsLow { get; set; }
        public int BarPeriodsHigh { get; set; }
        public bool StrictTradeClose { get; set; }
        public double BarPeriodsLowHighRatio { get; set; }
        public int LongMAPeriod { get; set; }
        public int CorridorAverageDaysBack { get; set; }
        public int CorridorPeriodsStart { get; set; }
        public int CorridorPeriodsLength { get; set; }
        public Nullable<System.DateTime> CorridorStartDate { get; set; }
        public double CorridorRatioForRange { get; set; }
        public double CorridorRatioForBreakout { get; set; }
        public double RangeRatioForTradeLimit { get; set; }
        public bool TradeByAngle { get; set; }
        public double ProfitToLossExitRatio { get; set; }
        public Nullable<bool> TradeByFirstWave { get; set; }
        public int PowerRowOffset { get; set; }
        public double RangeRatioForTradeStop { get; set; }
        public bool ReversePower { get; set; }
        public double CorrelationTreshold { get; set; }
        public bool CloseOnProfitOnly { get; set; }
        public bool CloseOnProfit { get; set; }
        public bool CloseOnOpen { get; set; }
        public bool StreachTradingDistance { get; set; }
        public bool CloseAllOnProfit { get; set; }
        public bool ReverseStrategy { get; set; }
        public bool TradeAndAngleSynced { get; set; }
        public double TradingAngleRange { get; set; }
        public bool CloseByMomentum { get; set; }
        public bool TradeByRateDirection { get; set; }
        public Nullable<System.DateTime> SupportDate { get; set; }
        public Nullable<System.DateTime> ResistanceDate { get; set; }
        public Nullable<double> GannAnglesOffset { get; set; }
        public string GannAngles { get; set; }
        public bool IsGannAnglesManual { get; set; }
        public Nullable<System.DateTime> GannAnglesAnchorDate { get; set; }
        public double SpreadShortToLongTreshold { get; set; }
        public Nullable<double> SupportPriceStore { get; set; }
        public Nullable<double> ResistancePriceStore { get; set; }
        public int SuppResLevelsCount { get; set; }
        public bool DoStreatchRates { get; set; }
        public bool IsSuppResManual { get; set; }
        public bool TradeOnCrossOnly { get; set; }
        public int TakeProfitFunctionInt { get; set; }
        public bool DoAdjustTimeframeByAllowedLot { get; set; }
        public bool IsColdOnTrades { get; set; }
        public int CorridorCrossesCountMinimum { get; set; }
        public double StDevToSpreadRatio { get; set; }
        public int LoadRatesSecondsWarning { get; set; }
        public int CorridorHighLowMethodInt { get; set; }
        public double CorridorStDevRatioMax { get; set; }
        public double CorridorLengthMinimum { get; set; }
        public int CorridorCrossHighLowMethodInt { get; set; }
        public Nullable<int> MovingAverageTypeInt { get; set; }
        public int PriceCmaLevels { get; set; }
        public int VolumeTresholdIterations { get; set; }
        public int StDevTresholdIterations { get; set; }
        public double StDevAverageLeewayRatio { get; set; }
        public int ExtreamCloseOffset { get; set; }
        public double CurrentLossInPipsCloseAdjustment { get; set; }
        public double CorridorBigToSmallRatio { get; set; }
        public Nullable<double> ResetOnBalance { get; set; }
        public int VoltageFunction { get; set; }
    }
}
